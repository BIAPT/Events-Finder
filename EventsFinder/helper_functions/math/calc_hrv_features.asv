function [hrv_feature_struct] = calc_hrv_features(app,type,window_size)
%CALC_HRV_FEATURES Calculate HRV features 
%   Input
%   app: contain the application public data
%   type: p = participant, c = care-giver
%   window_size: in points (not in ms)
%   
%   Output
%   hrv_features_struct: contain all the feature calculated
%   Features 
%   mean_RR : mean of RR
%   std_RR : std of RR
%   mean_succ_diff : mean successive difference
%   std_succ_diff : std successive difference
%   rms_succ_diff : root mean square of successive difference
%   pRR20 : pRR20 (see paper)
%
%   Paper: Unobtrusive Real-time Heart Rate Variability Analysis for the 
%          Detection of Orthostatic Dysregulation

    %% Creating variables
    hrv_feature_struct = struct();
    hrv_feature_struct.mean_RR = [];
    hrv_feature_struct.std_RR = [];
    hrv_feature_struct.mean_succ_diff = [];
    hrv_feature_struct.std_succ_diff = [];
    hrv_feature_struct.rms_succ_diff = [];
    hrv_feature_struct.pRR20 = [];
    
    %% Selecting Data
    if(strcmp(type,"p"))
        hr = app.HR_p;
    else
        hr = app.HR_c;
    end
    hr = str2double(hr);
    RR_intervals = (60./hr); % To get RR in seconds
    RR_intervals = RR_intervals.*1000 % To get RR in milliseconds
    
    %% Feature calculation
    % For everything else below we will use a sliding window to calculate the
    % features.
    for i = 1:window_size:(size(RR_intervals,1)-window_size)
    win_hr = RR_intervals(i:i+window_size,1);
    aggregate_hr = [aggregate_hr; win_hr];
    diff_win_hr = diff(win_hr);
    % Average of RR intervals
    mean_RR = [mean_RR; mean(win_hr)];
    % Standard deviation of RR intervals
    std_RR = [std_RR; std(win_hr)];
    % Average of successive differences
    mean_succ_diff = [mean_succ_diff; mean(diff_win_hr)];
    % Standard deviation of successive differences
    std_succ_diff = [std_succ_diff; std(diff_win_hr)];
    % Root mean square of successive differences
    rms_succ_diff = [rms_succ_diff; rms(diff_win_hr)];
%% Number of successive differences >= 20ms divided by all RR intervals
    threshold_rms = 20; %in ms
    pRR20 = [pRR20; size(diff_win_hr(diff_win_hr > threshold_rms),1)/size(diff_win_hr,1)];
    end

end

