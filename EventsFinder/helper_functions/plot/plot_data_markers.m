function plot_data_markers(name,hrv_features_struct,sc,hr,temp,event_struct,color)
%PLOT_DATA_MARKERS Plot graph of physiological data 
%   Input
%   name: 'participant' and/or 'caregiver'
%   hr: contains heart rate data 
%   sc: contains skin conductance (eda) data
%   temp: contains temperature data
%   event_struct: contains Event data found by the Events Finder.
%                 where 1-EDA; 2-HR; 3-Temperature
%   color: 'r' for participant, 'b' for caregiver

%   Output
%   plot figure: sc sublot, hr subplot, temperature subplot
%   SQI: drag down to view sqi (purple line) above graph for sc and temp. 
%       Ranges from n to n+1 where the values closest to n+1 are
%       greater in signal quality.
%   Events: asterisks

%% HRV sorting
times_hiHRV = [];
times_loHRV = [];
times_midHRV = [];

for i = 1:length(hrv_features_struct.pRR20)
    if (hrv_features_struct.pRR20(i) >= 0.7)
     times_hiHRV = [times_hiHRV,hrv_features_struct.time(i)];
    elseif (hrv_features_struct.pRR20(i) <= 0.2)
     times_loHRV = [times_loHRV,hrv_features_struct.time(i)];
    else
        times_midHRV = [times_midHRV,hrv_features_struct.time(i)];
    end
end

%% Find time event_struct.events generated by Events app
sc_markers = [];
hr_markers = [];
temp_markers = [];
for i = 1:length(event_struct.type)
    if(event_struct.type(i) == 1)
        %sc
        sc_markers = [sc_markers,event_struct.events(i)];
    elseif(event_struct.type(i) == 2)
       %hr
       hr_markers = [hr_markers,event_struct.events(i)];
    else
        %temp
        temp_markers = [temp_markers,event_struct.events(i)];
    end
end

data_1 = sc_markers;
for i = 1:length(sc_markers)
    sc_poss_time = sc.time(sc.time > sc_markers(i)); %choose all times greater than integer
    sc_poss_time = sc.time(sc.time == sc_poss_time(1,1),1); %find smallest exact time
    sc_poss_time = find(sc.time == sc_poss_time(1,1)); %index of exact time
    data_1(1,i)= sc_poss_time;
end
sc_marker_times = sc.time(data_1);
sc_marker_values = sc.avg(data_1); %y value corresponding to exact time

data_2 = hr_markers;
for i = 1:length(hr_markers)
hr_poss_time = hr.time(hr.time > hr_markers(i)); %choose all times greater than integer
hr_poss_time = hr.time(hr.time == hr_poss_time(1,1),1); %find smallest exact time
hr_poss_time = find(hr.time == hr_poss_time(1,1)); %index of exact time
data_2(1,i)= hr_poss_time;
end
hr_marker_times = hr.time(data_2);
hr_marker_values = hr.avg(data_2); %y value corresponding to exact time

data_3 = temp_markers;
for i = 1:length(temp_markers)
    temp_poss_time = temp.time(temp.time > temp_markers(i)); %choose all times greater than integer
    temp_poss_time = temp.time(temp.time == temp_poss_time(1,1),1); %find smallest exact time
    temp_poss_time = find(temp.time == temp_poss_time(1,1)); %index of exact time
    data_3(1,i)= temp_poss_time;
end
temp_marker_times = temp.time(data_3);
temp_marker_values = temp.avg(data_3); %y value corresponding to exact time

%% Plot Physiological Data
disp('Plotting data subplots');
title = strcat(name,' Physiological Data'); 
figure('Name',title)

sc_subplot = subplot(3,1,1);
%Modify SQI
sc.avg_sqi=(max(sc.avg)+0.5)+sc.avg_sqi; 
%Plot EDA Subplot
hold on
plot(sc.time,sc.avg,color);
plot(sc.time,sc.avg_sqi,'color',[153/255 153/255 255/255]);
if (~isempty(sc_markers)) %insert event_struct.events from events app
    (scatter(sc_marker_times,sc_marker_values,30,color,'*')); 
end
grid on
hold off
%Axis Properties
ylim([1 4]);
ylabel('EDA');
xticks(0:100:2700);
xtickangle(45);

hr_subplot = subplot(3,1,2);
%Plot HR Subplot
hold on
plot(hr.raw_time,hr.raw,'color',[160/255 160/255 160/255])
plot(hr.time,hr.avg,color)
grid on
if (~isempty(hr_markers)) %insert event_struct.events from events app
    (scatter(hr_marker_times,hr_marker_values,30,color,'*'));
end 
if ~isempty(times_hiHRV)
    vline(times_hiHRV,'g')
end
if ~isempty(times_loHRV)
    vline(times_loHRV,'y')
end 
if ~isempty(times_midHRV)
    vline(times_midHRV,'c')
end 
hold off
%Axis Properties
ylabel('HR'); 
xticks(0:100:2700);
xtickangle(45);

temp_subplot = subplot(3,1,3); 
%Modify SQI 
temp.avg_sqi = (max(temp.avg)+0.5)+temp.avg_sqi;
%Plot Temp Subplot 
hold on
plot(temp.time,temp.avg,color);
plot(temp.time,temp.avg_sqi,'color',[153/255 153/255 255/255]);
if (~isempty(temp_markers)) %insert event_struct.events from app
   (scatter(temp_marker_times,temp_marker_values,30,color,'*')); 
end
grid on
hold off
%Axis Properties
xlabel('Time(s)');
ylabel('Temp(C)'); 
ylim([34 36]);
xticks(0:100:2700);
xtickangle(45);

%Additional Axis Properties
linkaxes([sc_subplot,hr_subplot,temp_subplot],'x');
xlim([120 inf]);

disp('Program complete!');
clear
end